DROP TABLE "MEMBER";

CREATE TABLE "MEMBER" (
	"MEM_NO"	VARCHAR2(10)		NOT NULL,
	"MEM_KNAME"	VARCHAR2(15)		NOT NULL,
	"MEM_ENAME"	VARCHAR2(30)		NOT NULL,
	"MEM_BIRTH"	VARCHAR2(10)		NOT NULL,
	"MEM_HADDRESS"	VARCHAR2(500)		NOT NULL,
	"MEM_HPHONE"	VARCHAR2(15)		NULL,
	"MEM_CPHONE"	VARCHAR2(15)		NOT NULL,
	"MEM_SPHONE"	VARCHAR2(15)		NULL,
	"MEM_EMAIL"	VARCHAR2(200)		NOT NULL,
	"MEM_SMSCODE"	VARCHAR2(10)		NOT NULL,
	"MEM_TOPPOINT"	NUMBER	DEFAULT 0	NULL,
	"MEM_BANKCODE"	VARCHAR2(10)		NOT NULL,
	"MEM_ACCOUNT"	VARCHAR2(50)		NOT NULL,
	"MEM_LIMIT"	NUMBER		NOT NULL,
	"MEM_RECCODE"	VARCHAR2(10)		NOT NULL,
	"MEM_FAMILY"	NUMBER		NULL,
	"MEM_REGDATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"MEM_SECDATE"	DATE		NULL,
	"MEM_STATUS"	VARCHAR2(10)		NOT NULL
);

DROP TABLE "RECEIPT_ADDR";

CREATE TABLE "RECEIPT_ADDR" (
	"MEM_NO"	VARCHAR2(10)		NOT NULL,
	"REC_CODE"	VARCHAR2(10)		NOT NULL,
	"REC_ADDR"	VARCHAR2(500)		NOT NULL,
	"REC_PHONE"	VARCHAR2(15)		NOT NULL
);

DROP TABLE "MEMBER_ADD";

CREATE TABLE "MEMBER_ADD" (
	"MEM_NO"	VARCHAR2(10)		NOT NULL,
	"MEM_WADDR"	VARCHAR2(500)		NOT NULL,
	"MEM_WPHONE"	VARCHAR2(15)		NOT NULL,
	"MEM_WNAME"	VARCHAR2(50)		NOT NULL,
	"MEM_WDEPT"	VARCHAR2(50)		NULL,
	"MEM_JOB"	VARCHAR2(50)		NULL
);

DROP TABLE "CARD";

CREATE TABLE "CARD" (
	"CARD_NO"	VARCHAR2(20)		NOT NULL,
	"CARD_NAME"	VARCHAR2(100)		NULL,
	"CARD_SERVICE_CODE"	VARCHAR2(10)		NOT NULL,
	"CARD_DESIGN_CODE"	VARCHAR2(10)		NOT NULL,
	"CARD_BRAND_CODE"	VARCHAR2(10)		NOT NULL,
	"CARD_OVERSEAS"	NUMBER		NULL,
	"CARD_MEM_NO"	VARCHAR2(10)		NOT NULL,
	"CARD_STATUS_CODE"	VARCHAR2(10)		NOT NULL,
	"CARD_ISUDATE"	DATE		NULL,
	"CAR_DISDATE"	DATE		NULL
);

DROP TABLE "CARD_ADD";

CREATE TABLE "CARD_ADD" (
	"CARD_NO"	VARCHAR2(20)		NOT NULL,
	"CARD_ADD_CODE"	VARCHAR2(10)		NOT NULL
);

DROP TABLE "CODE";

CREATE TABLE "CODE" (
	"CODE_NO"	VARCHAR2(10)		NOT NULL,
	"CODE_NAME"	VARCHAR2(500)		NOT NULL
);

DROP TABLE "MODIFYLOG";

CREATE TABLE "MODIFYLOG" (
	"LOG_NO"	NUMBER		NOT NULL,
	"LOG_TBCODE"	VARCHAR2(10)		NOT NULL,
	"LOG_MODONE"	VARCHAR2(20)		NOT NULL,
	"LOG_MODIFY"	VARCHAR2(100)		NOT NULL,
	"LOG_MODIDATE"	DATE	DEFAULT SYSDATE	NOT NULL
);

ALTER TABLE "MEMBER" ADD CONSTRAINT "PK_MEMBER" PRIMARY KEY (
	"MEM_NO"
);

ALTER TABLE "RECEIPT_ADDR" ADD CONSTRAINT "PK_RECEIPT_ADDR" PRIMARY KEY (
	"MEM_NO",
	"REC_CODE"
);

ALTER TABLE "MEMBER_ADD" ADD CONSTRAINT "PK_MEMBER_ADD" PRIMARY KEY (
	"MEM_NO"
);

ALTER TABLE "CARD" ADD CONSTRAINT "PK_CARD" PRIMARY KEY (
	"CARD_NO"
);

ALTER TABLE "CARD_ADD" ADD CONSTRAINT "PK_CARD_ADD" PRIMARY KEY (
	"CARD_NO",
	"CARD_ADD_CODE"
);

ALTER TABLE "CODE" ADD CONSTRAINT "PK_CODE" PRIMARY KEY (
	"CODE_NO"
);

ALTER TABLE "MODIFYLOG" ADD CONSTRAINT "PK_MODIFYLOG" PRIMARY KEY (
	"LOG_NO"
);

ALTER TABLE "MEMBER" ADD CONSTRAINT "FK_CODE_TO_MEMBER_1" FOREIGN KEY (
	"MEM_SMSCODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "MEMBER" ADD CONSTRAINT "FK_CODE_TO_MEMBER_2" FOREIGN KEY (
	"MEM_BANKCODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "MEMBER" ADD CONSTRAINT "FK_CODE_TO_MEMBER_3" FOREIGN KEY (
	"MEM_RECCODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "MEMBER" ADD CONSTRAINT "FK_CODE_TO_MEMBER_4" FOREIGN KEY (
	"MEM_STATUS"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "RECEIPT_ADDR" ADD CONSTRAINT "FK_MEMBER_TO_RECEIPT_ADDR_1" FOREIGN KEY (
	"MEM_NO"
)
REFERENCES "MEMBER" (
	"MEM_NO"
);

ALTER TABLE "RECEIPT_ADDR" ADD CONSTRAINT "FK_CODE_TO_RECEIPT_ADDR_1" FOREIGN KEY (
	"REC_CODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "MEMBER_ADD" ADD CONSTRAINT "FK_MEMBER_TO_MEMBER_ADD_1" FOREIGN KEY (
	"MEM_NO"
)
REFERENCES "MEMBER" (
	"MEM_NO"
);

ALTER TABLE "CARD" ADD CONSTRAINT "FK_CODE_TO_CARD_1" FOREIGN KEY (
	"CARD_SERVICE_CODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "CARD" ADD CONSTRAINT "FK_CODE_TO_CARD_2" FOREIGN KEY (
	"CARD_DESIGN_CODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "CARD" ADD CONSTRAINT "FK_CODE_TO_CARD_3" FOREIGN KEY (
	"CARD_BRAND_CODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "CARD" ADD CONSTRAINT "FK_CODE_TO_CARD_4" FOREIGN KEY (
	"CARD_STATUS_CODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "CARD" ADD CONSTRAINT "FK_MEMBER_TO_CARD_1" FOREIGN KEY (
	"CARD_MEM_NO"
)
REFERENCES "MEMBER" (
	"MEM_NO"
);

ALTER TABLE "CARD_ADD" ADD CONSTRAINT "FK_CARD_TO_CARD_ADD_1" FOREIGN KEY (
	"CARD_NO"
)
REFERENCES "CARD" (
	"CARD_NO"
);

ALTER TABLE "CARD_ADD" ADD CONSTRAINT "FK_CODE_TO_CARD_ADD_1" FOREIGN KEY (
	"CARD_ADD_CODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

ALTER TABLE "MODIFYLOG" ADD CONSTRAINT "FK_CODE_TO_MODIFYLOG_1" FOREIGN KEY (
	"LOG_TBCODE"
)
REFERENCES "CODE" (
	"CODE_NO"
);

--- SUCESS ALERT
INSERT INTO CODE VALUES ('SA01','유료SMS');
INSERT INTO CODE VALUES ('SA02','유료카카오알림톡');
INSERT INTO CODE VALUES ('SA03', '무료SMS');
INSERT INTO CODE VALUES ('SA04', '무료카카오알림톡');

COMMIT;
ROLLBACK;

-- BANK CODE
INSERT INTO CODE VALUES ('BC001','IBK기업은행');
INSERT INTO CODE VALUES ('BC002','국민은행');
INSERT INTO CODE VALUES ('BC003', '신한은행');
INSERT INTO CODE VALUES ('BC004', '우리은행');
INSERT INTO CODE VALUES ('BC005', 'KEB하나은행');
INSERT INTO CODE VALUES ('BC006', '케이뱅크');
INSERT INTO CODE VALUES ('BC007', '카카오뱅크');
INSERT INTO CODE VALUES ('BC008', 'KDB산업은행');
INSERT INTO CODE VALUES ('BC009', '한국수출입은행');


--- CARD BRAND
INSERT INTO CODE VALUES ('CB001','국내');
INSERT INTO CODE VALUES ('CB002','마스터');
INSERT INTO CODE VALUES ('CB003','비자');
INSERT INTO CODE VALUES ('CB004','Unionpay');
INSERT INTO CODE VALUES ('CB005','BC글로벌');

---CARD SERVICE
INSERT INTO CODE VALUES ('CS001','신용카드');
INSERT INTO CODE VALUES ('CS002', '체크카드');

--- CARD DESIGN
INSERT INTO CODE VALUES ('CD001', '디자인 1');
INSERT INTO CODE VALUES ('CD002', '디자인 2');
INSERT INTO CODE VALUES ('CD003', '디자인 3');

--CADE ADDITIONAL
INSERT INTO CODE VALUES ('CA001', '교통카드');
INSERT INTO CODE VALUES ('CA002', '현금카드');

COMMIT;

---- BILL 
INSERT INTO CODE VALUES ('BR001', '이메일');

--- MEMBER STATUS

INSERT INTO CODE VALUES ('MS001', '일반회원');
INSERT INTO CODE VALUES ('MS002', '탈퇴회원');

---- CARD CODE
INSERT INTO CODE VALUES ('CC001', '정상카드');
INSERT INTO CODE VALUES ('CC002', '분실카드');
INSERT INTO CODE VALUES ('CC003', '정지카드');
INSERT INTO CODE VALUES ('CC004', '기간만료');


CREATE SEQUENCE SEQ_MEM 
START WITH 2
MAXVALUE 99
MINVALUE 1
NOCACHE
CYCLE;

CREATE SEQUENCE SEQ_CRD
MAXVALUE 99999999
MINVALUE 1
NOCACHE
CYCLE;

DROP SEQUENCE SEQ_CRD;

DROP TABLE MEMBER_ADD;

SELECT * FROM MEMBER;
SELECT MEM_NO, MEM_KNAME, MEM_ENAME, MEM_BIRTH, MEM_CPHONE, MEM_EMAIL, CODE_NAME as "MEM_SMSCODE"
FROM MEMBER
JOIN CODE ON ( MEM_SMSCODE = CODE_NO );

SELECT MEM_NO, MEM_KNAME, MEM_ENAME, MEM_BIRTH, MEM_CPHONE, MEM_EMAIL, A.CODE_NAME as "MEM_SMSCODE", B.CODE_NAME as "MEM_BANKCODE", MEM_ACCOUNT, MEM_LIMIT, C.CODE_NAME as "MEM_BILLCODE", MEM_FAMILY, MEM_REGDATE, MEM_SECDATE, MEM_STATUS, MEM_WNAME, MEM_DEPT, MEM_JOBP, (SELECT BA.BILL_ADDR FROM BILL_ADDR BA WHERE M.MEM_NO = BA.MEM_NO AND BA.BILL_CODE = 'BR003') AS "MEM_HADDR", (SELECT BA.BILL_PHONE FROM BILL_ADDR BA WHERE M.MEM_NO = BA.MEM_NO AND BA.BILL_CODE = 'BR003') AS "MEM_HPHONE"
FROM MEMBER M
JOIN CODE A ON ( M.MEM_SMSCODE = A.CODE_NO )
JOIN CODE B ON ( M.MEM_BANKCODE = B.CODE_NO )
JOIN CODE C ON ( M.MEM_BILLCODE = C.CODE_NO )
WHERE M.MEM_NO = '0'
;

SELECT * FROM CARD;
SELECT C.CARD_NO, C.CARD_NAME, C.CARD_SERVICE_CODE, C1.CODE_NAME AS "CARD_SERVICE_NAME", C.CARD_DESIGN_CODE, C2.CODE_NAME AS "CARD_DESIGN_NAME", C.CARD_BRAND_CODE, C3.CODE_NAME AS "CARD_BRAND_NAME", C.CARD_OVERSEAS, C.CARD_MEM_NO, C.CARD_STATUS_CODE , C4.CODE_NAME AS "CARD_STATUS_NAME" , C.CARD_ADD1, C.CARD_ADD2
FROM CARD C
JOIN CODE C1 ON ( C.CARD_SERVICE_CODE = C1.CODE_NO )
JOIN CODE C2 ON ( C.CARD_DESIGN_CODE = C2.CODE_NO )
JOIN CODE C3 ON ( C.CARD_BRAND_CODE = C3.CODE_NO )
JOIN CODE C4 ON ( C.CARD_STATUS_CODE = C4.CODE_NO )
;

CREATE TABLE "FAMILY" (
	"FAM_MEM_NO"	VARCHAR2(10)		NOT NULL,
	"FAM_MEM_NO2"	VARCHAR2(10)		NOT NULL
);

ALTER TABLE "FAMILY" ADD CONSTRAINT "PK_FAMILY" PRIMARY KEY (
	"FAM_MEM_NO",
	"FAM_MEM_NO2"
);

ALTER TABLE "FAMILY" ADD CONSTRAINT "FK_MEMBER_TO_FAMILY_1" FOREIGN KEY (
	"FAM_MEM_NO"
)
REFERENCES "MEMBER" (
	"MEM_NO"
);

ALTER TABLE "FAMILY" ADD CONSTRAINT "FK_MEMBER_TO_FAMILY_2" FOREIGN KEY (
	"FAM_MEM_NO2"
)
REFERENCES "MEMBER" (
	"MEM_NO"
);

-- 가족회원 리스트 가져오기
SELECT M.*, ( SELECT FAM_COMMENTS FROM FAMILY F WHERE F.FAM_MEM_NO2 = M.MEM_NO ) AS "FAM_POSITION"
FROM MEMBER M
WHERE MEM_NO IN ( SELECT FAM_MEM_NO2 FROM FAMILY WHERE FAM_MEM_NO = '2019112913' )
ORDER BY 1 ASC
;

-------- LOG 테이블 SEQUENCE
CREATE SEQUENCE SEQ_LOG NOCACHE;

---------- UPDATE시 LOG 테이블에 INSERT 하는 트리거 작성
CREATE OR REPLACE TRIGGER TRG_MEM_LOG
AFTER UPDATE ON MEMBER 
FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.MEM_KNAME != :OLD.MEM_KNAME THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_KNAME', :OLD.MEM_KNAME, :NEW.MEM_KNAME, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_ENAME != :OLD.MEM_ENAME THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_ENAME', :OLD.MEM_ENAME, :NEW.MEM_ENAME, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_BIRTH != :OLD.MEM_BIRTH THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_BIRTH', :OLD.MEM_BIRTH, :NEW.MEM_BIRTH, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_CPHONE != :OLD.MEM_CPHONE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_CPHONE', :OLD.MEM_CPHONE, :NEW.MEM_CPHONE, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_SPHONE != :OLD.MEM_SPHONE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_SPHONE', :OLD.MEM_SPHONE, :NEW.MEM_SPHONE, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_EMAIL != :OLD.MEM_EMAIL THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_EMAIL', :OLD.MEM_EMAIL, :NEW.MEM_EMAIL, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_SMSCODE != :OLD.MEM_SMSCODE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_SMSCODE', :OLD.MEM_SMSCODE, :NEW.MEM_SMSCODE, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_BANKCODE != :OLD.MEM_BANKCODE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_BANKCODE', :OLD.MEM_BANKCODE, :NEW.MEM_BANKCODE, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_ACCOUNT != :OLD.MEM_ACCOUNT THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_ACCOUNT', :OLD.MEM_ACCOUNT, :NEW.MEM_ACCOUNT, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_LIMIT != :OLD.MEM_LIMIT THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_LIMIT', :OLD.MEM_LIMIT, :NEW.MEM_LIMIT, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_BILLCODE != :OLD.MEM_BILLCODE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_BILLCODE', :OLD.MEM_BILLCODE, :NEW.MEM_BILLCODE, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_STATUS != :OLD.MEM_STATUS THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_STATUS', :OLD.MEM_STATUS, :NEW.MEM_STATUS, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_WNAME != :OLD.MEM_WNAME THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_WNAME', :OLD.MEM_WNAME, :NEW.MEM_WNAME, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_DEPT != :OLD.MEM_DEPT THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_DEPT', :OLD.MEM_DEPT, :NEW.MEM_DEPT, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
    IF :NEW.MEM_JOBP != :OLD.MEM_JOBP THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC001', 'MEM_JOBP', :OLD.MEM_JOBP, :NEW.MEM_JOBP, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_FAM_LOG
AFTER INSERT OR DELETE OR UPDATE ON FAMILY 
FOR EACH ROW
DECLARE
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGTB VALUES (SEQ_LOG.NEXTVAL, 'TC003', 'INSERT', :NEW.FAM_MEM_NO, :NEW.FAM_MEM_NO2, :NEW.ROWID, DEFAULT, :NEW.FAM_MEM_NO );
    ELSIF DELETING THEN
        INSERT INTO LOGTB VALUES (SEQ_LOG.NEXTVAL, 'TC003', 'DELETE', :OLD.FAM_MEM_NO, :OLD.FAM_MEM_NO2, :OLD.ROWID, DEFAULT, :OLD.FAM_MEM_NO );
    ELSIF UPDATING THEN
        IF :NEW.FAM_COMMENTS != :OLD.FAM_COMMENTS THEN
        INSERT INTO LOGTB VALUES (SEQ_LOG.NEXTVAL, 'TC003', 'FAM_COMMENTS', :OLD.FAM_COMMENTS, :NEW.FAM_COMMENTS, :OLD.ROWID, DEFAULT, :OLD.FAM_MEM_NO );
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_CAD_LOG
AFTER UPDATE ON CARD
FOR EACH ROW
DECLARE
BEGIN
    IF :OLD.CARD_NAME != :NEW.CARD_NAME THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC002', 'CARD_NAME', :OLD.CARD_NAME, :NEW.CARD_NAME, :OLD.ROWID, DEFAULT, :OLD.CARD_MEM_NO );
    END IF;
    IF :OLD.CARD_SERVICE_CODE != :NEW.CARD_SERVICE_CODE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC002', 'CARD_SERVICE_CODE', :OLD.CARD_SERVICE_CODE, :NEW.CARD_SERVICE_CODE, :OLD.ROWID, DEFAULT, :OLD.CARD_MEM_NO );
    END IF;
    IF :OLD.CARD_DESIGN_CODE != :NEW.CARD_DESIGN_CODE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC002', 'CARD_DESIGN_CODE', :OLD.CARD_DESIGN_CODE, :NEW.CARD_DESIGN_CODE, :OLD.ROWID, DEFAULT, :OLD.CARD_MEM_NO );
    END IF;
    IF :OLD.CARD_BRAND_CODE != :NEW.CARD_BRAND_CODE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC002', 'CARD_BRAND_CODE', :OLD.CARD_BRAND_CODE, :NEW.CARD_BRAND_CODE, :OLD.ROWID, DEFAULT, :OLD.CARD_MEM_NO );
    END IF;
    IF :OLD.CARD_OVERSEAS != :NEW.CARD_OVERSEAS THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC002', 'CARD_OVERSEAS', :OLD.CARD_OVERSEAS, :NEW.CARD_OVERSEAS, :OLD.ROWID, DEFAULT, :OLD.CARD_MEM_NO );
    END IF;
    IF :OLD.CARD_STATUS_CODE != :NEW.CARD_STATUS_CODE THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC002', 'CARD_STATUS_CODE', :OLD.CARD_STATUS_CODE, :NEW.CARD_STATUS_CODE, :OLD.ROWID, DEFAULT, :OLD.CARD_MEM_NO );
    END IF;
    IF :OLD.CARD_ADD1 != :NEW.CARD_ADD1 THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC002', 'CARD_ADD1', :OLD.CARD_ADD1, :NEW.CARD_ADD1, :OLD.ROWID, DEFAULT, :OLD.CARD_MEM_NO );
    END IF;
    IF :OLD.CARD_ADD2 != :NEW.CARD_ADD2 THEN
        INSERT INTO LOGTB VALUES ( SEQ_LOG.NEXTVAL, 'TC002', 'CARD_ADD2', :OLD.CARD_ADD2, :NEW.CARD_ADD2, :OLD.ROWID, DEFAULT, :OLD.CARD_MEM_NO );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_ADR_LOG
AFTER INSERT OR DELETE OR UPDATE ON BILL_ADDR
FOR EACH ROW
DECLARE
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGTB VALUES (SEQ_LOG.NEXTVAL, 'TC004', 'INSERT', :NEW.MEM_NO, :NEW.BILL_CODE, :NEW.ROWID, DEFAULT, :NEW.MEM_NO );
    ELSIF DELETING THEN
        INSERT INTO LOGTB VALUES (SEQ_LOG.NEXTVAL, 'TC004', 'DELETE', :OLD.MEM_NO, :OLD.BILL_CODE, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
    ELSIF UPDATING THEN
        IF :OLD.BILL_ADDR != :NEW.BILL_ADDR THEN
            INSERT INTO LOGTB VALUES (SEQ_LOG.NEXTVAL, 'TC004', 'BILL_ADDR', :OLD.BILL_ADDR, :NEW.BILL_ADDR, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
        END IF;
        IF :OLD.BILL_PHONE != :NEW.BILL_PHONE THEN
            INSERT INTO LOGTB VALUES (SEQ_LOG.NEXTVAL, 'TC004', 'BILL_PHONE', :OLD.BILL_PHONE, :NEW.BILL_PHONE, :OLD.ROWID, DEFAULT, :OLD.MEM_NO );
        END IF;
    END IF;
END;
/
